#ifndef PROCESSES_H
#define PROCESSES_H

struct Process {
    int ID;
    char name[30];
};

extern struct Process processes[5];
extern int processescount;

int createnewprocess(char name[30]);
void stopprocess (int id);

#endif

/*Създайте модул, който се казва “processes” и се състои от два файла: processes.h и processes.c.
В модула processes създайте структура “Process”, която да държи информацията за даден процес. Информацията се състои
от две полета - уникално ID (номер на процеса) и име на процеса. Името може да бъде до 30 символа.
В модула processes създайте глобална променлива “processes”, която да пази всички процеси, които са пуснати в 
операционната система. В операционната система, могат да са пуснати най-много 5 процеса.
В модула processes създайте глобална променлива “processescount”, която да пази, колко са пуснатите до този момент 
процеси.
Създайте функция nextprocessid, която да връща уникален номер на процес (id). Номерът на процеса трябва да е 
положително целочислено число. Функцията трябва да връща 0 ако диапазона с уникални номера е изчерпан. Функцията 
трябва да е видима само в модула processes, защото не искаме, някой да я вика по погрешка извън модула и да заема 
номера на процеси.
В модула processes създайте функция “createnewprocess”, която да създава нов процес и да го записва в глобалната 
променлива. При създаването трябва да се извика функцията nextprocessid, за да се генерира уникален номер на процеса,
а името на процеса трябва да се подава като аргумент на функцията “createnewprocess”. Функцията трябва да връща 
уникалния номер на процеса ако успее да се създаде успешно процес и 0 ако няма място да се създаде нов процес. 
Функцията трябва да увеличава броя на работещите процеси (“processcount”) при успешно създаване на процес.
В модула processes създайте функция “stopprocess”, която да спира процес по уникален номер (функцията трябва да приема
уникалния номер като аргумент) и да изтрива съответния запис от глобалната променлива “processes” и да намалява 
променливата “processcount”. Функцията трябва да преподрежда данните в processes, така че празните пространства в 
масива винаги да остават след края на последния запис (тоест да няма дупки между елементите на масива). Ако се въведe
невалиден номер на процес, програмата не трябва да прави нищо.
Създайте сорс файл, който да се казва “taskmanager.c”, която да предоставя програма с 4 опции: Създаване на процес, 
Извеждане на списък със всички процеси, Спиране на процес и изход на програмата:
Създаване на процес - При избор на тази опция потребителя трябва да въведе име на процеса, при което програмата трябва
да извика функцията “createnewprocess” за да създаде нов процес и да го запише в глобалната променлива “processes”. 
Ако потребителя се опита да създаде процес, с който да надхвърля капацитета от 5 работещи процеса, трябва да се изведе
съобщение за грешка, че максималния брой работещи процеси е достигнат и за да се създаде нов процес трябва да се спре
някой от работещите.
Извеждане на списък със всички процеси - При избор на тази опция трябва да се принтира съдържанието на глобалната 
променлива “processes”. Всеки процес трябва да се принтира на нов ред с неговият уникален номер и име.
Спиране на процес - При избор на тази опция, потребителя се подканва да въведе номер на процес, който иска да спре. 
Извиква се функцията “stopprocess”, която спира процесът.
Изход от програмата - При избор на тази опция програмата “taskmanager” се прекратява
Създайте Makefile, който да построява модула “processes” и програмата “taskmanager” и да има цел за почистване на 
файловете създадени по време на компилация.*/